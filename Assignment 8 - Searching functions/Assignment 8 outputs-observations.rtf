{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Courier New;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\f0\fs22 ----------------PROG 1 OUTPUT----------------\par
The list has 1000 random items, which will not be printed to the console\par
Enter search item: 999\par
\par
Recursive sequential search result:\par
Item found at 548\par
1198 microseconds elapsed\par
Sequential search result:\par
Item found at 548\par
218 microseconds elapsed\par

\pard Binary Search test - last value\par
Item found at position 999\par
1198 microseconds elapsed\par
Recursive Binary Search test - last value\par
Item found at position 999\par
218 microseconds elapsed\par

\pard\par
Press any key to continue . . .\par
---------------PROG 1 OUTPUT END-------------\par
I noticed that after running the program several times with different search values, sequential search consistently gave better performance.\par
\par
\par

\pard ----------------PROG 2 OUTPUT----------------\par

\pard\par
The list will not be printed due to it's length\par
The list's last value is 3058\par
Enter search item: 100\par
\par
Binary Search test\par
Item not in the list\par
202 microseconds elapsed\par
Recursive Binary Search test\par
Item not in the list\par
476 microseconds elapsed\par
Binary Search test - last value\par
Item found at position 999\par
202 microseconds elapsed\par
Recursive Binary Search test - last value\par
Item found at position 999\par
476 microseconds elapsed\par
Press any key to continue . . .\par
\par

\pard ---------------PROG 2 OUTPUT END-------------\par
The normal binary search test was always faster than the recursive binary search test, and the value that was searched for seemed to be irrelevant to the speed of the program\par
\par
\par
\par
----------------PROG 3 OUTPUT----------------\par
The list wll not be printed due to it's length\par
Enter search item: 100\par
\par
Seq Ord Search test\par
Item not in the list\par
361 microseconds elapsed\par
Seq Search test\par
Item found at position 750\par
492 microseconds elapsed\par
Seq Ord Search Test - last value\par
Item not in the list\par
361 microseconds elapsed\par
Seq Search test - last value\par
Item found at position 999\par
492 microseconds elapsed\par
Press any key to continue . . .\par
\par
\par
---------------PROG 3 OUTPUT END-------------\par
It seems to me that the Seq Ord Search function is broken, because it always returns that the integer does not exist in the array, regardless, it always seemed to be slightly faster than the seq search test\par
\par
\par
\par
----------------PROG 4 OUTPUT----------------\par
\par
\par
intList:\par
List: 44 47 68 215 444 447 468 615 844 847 868 1015 1244 1247 1268 1415 1644 1647 1668 1815 2044 2047 2068 2215 2444 2447 2468 2615 2844 2847 2868 3015 3244 3247 3268 3415 3644 3647 3668 3815 4044 4047 4068 4215 4444 4447 4468 4615 4844 4847 4868 5015 5244 5247 5268 5415 5644 5647 5668 5815 6044 6047 6068 6215 6444 6447 6468 6615 6844 6847 6868 7015 7244 7247 7268 7415 7644 7647 7668 7815 8044 8047 8068 8215 8444 8447 8468 8615 8844 8847 8868 9015 9244 9247 9268 9415 9644 9647 9668 9815 10044 10047 10068 10215 10444 10447 10468 10615 10844 10847 10868 11015 11244 11247 11268 11415 11644 11647 11668 11815 12044 12047 12068 12215 12444 12447 12468 12615 12844 12847 12868 13015 13244 13247 13268 13415 13644 13647 13668 13815 14044 14047 14068 14215 14444 14447 14468 14615 14844 14847 14868 15015 15244 15247 15268 15415 15644 15647 15668 15815 16044 16047 16068 16215 16444 16447 16468 16615 16844 16847 16868 17015 17244 17247 17268 17415 17644 17647 17668 17815 18044 18047 18068 18215 18444 18447 18468 18615 18844 18847 18868 19015 19244 19247 19268 19415 19644 19647 19668 19815 20044 20047 20068 20215 20444 20447 20468 20615 20844 20847 20868 21015 21244 21247 21268 21415 21644 21647 21668 21815 22044 22047 22068 22215 22444 22447 22468 22615 22844 22847 22868 23015 23244 23247 23268 23415 23644 23647 23668 23815 24044 24047 24068 24215 24444 24447 24468 24615 24844 24847 24868 25015 25244 25247 25268 25415 25644 25647 25668 25815 26044 26047 26068 26215 26444 26447 26468 26615 26844 26847 26868 27015 27244 27247 27268 27415 27644 27647 27668 27815 28044 28047 28068 28215 28444 28447 28468 28615 28844 28847 28868 29015 29244 29247 29268 29415 29644 29647 29668 29815 30044 30047 30068 30215 30444 30447 30468 30615 30844 30847 30868 31015 31244 31247 31268 31415 31644 31647 31668 31815 32044 32047 32068 32215 32444 32447 32468 32615 32844 32847 32868 33015 33244 33247 33268 33415 33644 33647 33668 33815 34044 34047 34068 34215 34444 34447 34468 34615 34844 34847 34868 35015 35244 35247 35268 35415 35644 35647 35668 35815 36044 36047 36068 36215 36444 36447 36468 36615 36844 36847 36868 37015 37244 37247 37268 37415 37644 37647 37668 37815 38044 38047 38068 38215 38444 38447 38468 38615 38844 38847 38868 39015 39244 39247 39268 39415 39644 39647 39668 39815 40044 40047 40068 40215 40444 40447 40468 40615 40844 40847 40868 41015 41244 41247 41268 41415 41644 41647 41668 41815 42044 42047 42068 42215 42444 42447 42468 42615 42844 42847 42868 43015 43244 43247 43268 43415 43644 43647 43668 43815 44044 44047 44068 44215 44444 44447 44468 44615 44844 44847 44868 45015 45244 45247 45268 45415 45644 45647 45668 45815 46044 46047 46068 46215 46444 46447 46468 46615 46844 46847 46868 47015 47244 47247 47268 47415 47644 47647 47668 47815 48044 48047 48068 48215 48444 48447 48468 48615 48844 48847 48868 49015 49244 49247 49268 49415 49644 49647 49668 49815 50044 50047 50068 50215 50444 50447 50468 50615 50844 50847 50868 51015 51244 51247 51268 51415 51644 51647 51668 51815 52044 52047 52068 52215 52444 52447 52468 52615 52844 52847 52868 53015 53244 53247 53268 53415 53644 53647 53668 53815 54044 54047 54068 54215 54444 54447 54468 54615 54844 54847 54868 55015 55244 55247 55268 55415 55644 55647 55668 55815 56044 56047 56068 56215 56444 56447 56468 56615 56844 56847 56868 57015 57244 57247 57268 57415 57644 57647 57668 57815 58044 58047 58068 58215 58444 58447 58468 58615 58844 58847 58868 59015 59244 59247 59268 59415 59644 59647 59668 59815 60044 60047 60068 60215 60444 60447 60468 60615 60844 60847 60868 61015 61244 61247 61268 61415 61644 61647 61668 61815 62044 62047 62068 62215 62444 62447 62468 62615 62844 62847 62868 63015 63244 63247 63268 63415 63644 63647 63668 63815 64044 64047 64068 64215 64444 64447 64468 64615 64844 64847 64868 65015 65244 65247 65268 65415 65644 65647 65668 65815 66044 66047 66068 66215 66444 66447 66468 66615 66844 66847 66868 67015 67244 67247 67268 67415 67644 67647 67668 67815 68044 68047 68068 68215 68444 68447 68468 68615 68844 68847 68868 69015 69244 69247 69268 69415 69644 69647 69668 69815 70044 70047 70068 70215 70444 70447 70468 70615 70844 70847 70868 71015 71244 71247 71268 71415 71644 71647 71668 71815 72044 72047 72068 72215 72444 72447 72468 72615 72844 72847 72868 73015 73244 73247 73268 73415 73644 73647 73668 73815 74044 74047 74068 74215 74444 74447 74468 74615 74844 74847 74868 75015 75244 75247 75268 75415 75644 75647 75668 75815 76044 76047 76068 76215 76444 76447 76468 76615 76844 76847 76868 77015 77244 77247 77268 77415 77644 77647 77668 77815 78044 78047 78068 78215 78444 78447 78468 78615 78844 78847 78868 79015 79244 79247 79268 79415 79644 79647 79668 79815 80044 80047 80068 80215 80444 80447 80468 80615 80844 80847 80868 81015 81244 81247 81268 81415 81644 81647 81668 81815 82044 82047 82068 82215 82444 82447 82468 82615 82844 82847 82868 83015 83244 83247 83268 83415 83644 83647 83668 83815 84044 84047 84068 84215 84444 84447 84468 84615 84844 84847 84868 85015 85244 85247 85268 85415 85644 85647 85668 85815 86044 86047 86068 86215 86444 86447 86468 86615 86844 86847 86868 87015 87244 87247 87268 87415 87644 87647 87668 87815 88044 88047 88068 88215 88444 88447 88468 88615 88844 88847 88868 89015 89244 89247 89268 89415 89644 89647 89668 89815 90044 90047 90068 90215 90444 90447 90468 90615 90844 90847 90868 91015 91244 91247 91268 91415 91644 91647 91668 91815 92044 92047 92068 92215 92444 92447 92468 92615 92844 92847 92868 93015 93244 93247 93268 93415 93644 93647 93668 93815 94044 94047 94068 94215 94444 94447 94468 94615 94844 94847 94868 95015 95244 95247 95268 95415 95644 95647 95668 95815 96044 96047 96068 96215 96444 96447 96468 96615 96844 96847 96868 97015 97244 97247 97268 97415 97644 97647 97668 97815 98044 98047 98068 98215 98444 98447 98468 98615 98844 98847 98868 99015 99244 99247 99268 99415 99644 99647 99668 99815\par
List Size: 1000\par
Max List Size: 1000\par
Enter search item: 96847\par
\par
*****Using binary search*****\par
Item found at 970;  Number of comparisons = 19\par
*****Using binary and sequential search*****\par
Item found at 970;  Number of comparisons = 14\par
Press any key to continue . . .\par
\par
---------------PROG 4 OUTPUT END-------------\par
The combined search method seems to only be quicker in very select cases, at the end and beginning of the array the binary search function is faster, but at select values that approach the end of the array, the combined search function is quicker. In conclusion, it should be better to simply use the binary search standard function\par
\par
\par
\par
\par
----------------PROG 5 OUTPUT----------------\par
Enter numbers ending with -999\par
2\par
4\par
5\par
6\par
7\par
8\par
12\par
13\par
18\par
15\par
24\par
-999\par
The number you entered in ascending order are:\par
List: 2 4 5 6 7 8 12 13 15 18 24\par
List Size: 11\par
Max List Size: 100\par
3 microseconds elapsed inserting nums\par
The list is:\par
List: 1 2 4 5 6 7 8 12 13 15 18 19 24 29 49 69 79 99\par
List Size: 18\par
Max List Size: 100\par
Press any key to continue . . .\par
\par
\par
---------------PROG 5 OUTPUT END-------------\par
After multiple tests, although the performance of the algorithm is relatively persistent throughout most cases, it seems to be the fastest when the array is smaller and when the items are being inserted at the beginning of the list\par
\par
\par
\par
\par
----------------PROG 6 OUTPUT----------------\par
The list will not be printed due to it's size\par
\par
11 microseconds elapsed while deleting nums\par
Press any key to continue . . .\par
\par
\par
---------------PROG 6 OUTPUT END-------------\par
After testing multiple different values, it seems that removeOrd operates signficantly faster when removing values that are closer to the END of the array\par
\par
}
 